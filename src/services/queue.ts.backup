import { Queue, Worker, JobsOptions, Job } from 'bullmq';
import IORedis from 'ioredis';
import { logInfo, logError } from '@/utils/logger';
import { BATCH } from '@/constants';

const connection = new IORedis(process.env.REDIS_URL || 'redis://localhost:6379');

// Tipos de jobs
export interface DocumentJob {
  documentId: string;
  filePath: string;
  documentType: string;
  userId: string;
  priority?: number;
}

export interface BatchJob {
  batchId: string;
  documents: DocumentJob[];
  userId: string;
  priority?: number;
}

export interface AIJob {
  jobId: string;
  content: string;
  model: string;
  userId: string;
  priority?: number;
}

// Configuração das filas
const queueConfig = {
  defaultJobOptions: {
    removeOnComplete: 100, // Manter últimos 100 jobs completos
    removeOnFail: 50,      // Manter últimos 50 jobs falhados
    attempts: BATCH.RETRY_ATTEMPTS,
    backoff: {
      type: 'exponential',
      delay: BATCH.RETRY_DELAY,
    },
  },
};

// Criar filas
export const documentQueue = new Queue<DocumentJob>('document-processing', queueConfig);
export const batchQueue = new Queue<BatchJob>('batch-processing', queueConfig);
export const iaQueue = new Queue('ia-processing', { connection });

// Criar scheduler para a fila IA (corrigido)
const iaScheduler = new QueueScheduler('ia-processing', { connection });

// Configurar listeners de eventos
documentQueue.on('completed', (job, result) => {
  logInfo('Document job completed', {
    jobId: job.id,
    documentId: job.data.documentId,
    result,
  });
});

documentQueue.on('failed', (job, err) => {
  logError('Document job failed', err, {
    jobId: job.id,
    documentId: job.data.documentId,
    attempts: job.attemptsMade,
  });
});

batchQueue.on('completed', (job, result) => {
  logInfo('Batch job completed', {
    jobId: job.id,
    batchId: job.data.batchId,
    processedCount: result?.processedCount || 0,
  });
});

batchQueue.on('failed', (job, err) => {
  logError('Batch job failed', err, {
    jobId: job.id,
    batchId: job.data.batchId,
    attempts: job.attemptsMade,
  });
});

iaQueue.on('completed', (job, result) => {
  logInfo('AI job completed', {
    jobId: job.id,
    model: job.data.model,
    resultLength: result?.length || 0,
  });
});

iaQueue.on('failed', (job, err) => {
  logError('AI job failed', err, {
    jobId: job.id,
    model: job.data.model,
    attempts: job.attemptsMade,
  });
});

// Funções para adicionar jobs
export const addDocumentJob = async (data: DocumentJob): Promise<Queue.Job<DocumentJob>> => {
  const job = await documentQueue.add('process-document', data, {
    priority: data.priority || 0,
    timeout: BATCH.TIMEOUT,
  });
  
  logInfo('Document job added', {
    jobId: job.id,
    documentId: data.documentId,
    priority: data.priority,
  });
  
  return job;
};

export const addBatchJob = async (data: BatchJob): Promise<Queue.Job<BatchJob>> => {
  const job = await batchQueue.add('process-batch', data, {
    priority: data.priority || 0,
    timeout: BATCH.TIMEOUT * 2, // Batch jobs precisam de mais tempo
  });
  
  logInfo('Batch job added', {
    jobId: job.id,
    batchId: data.batchId,
    documentCount: data.documents.length,
    priority: data.priority,
  });
  
  return job;
};

export const addAIJob = async (data: AIJob): Promise<Queue.Job<AIJob>> => {
  const job = await iaQueue.add('process', data, {
    priority: data.priority || 0,
    timeout: BATCH.TIMEOUT,
  });
  
  logInfo('AI job added', {
    jobId: job.id,
    model: data.model,
    contentLength: data.content.length,
    priority: data.priority,
  });
  
  return job;
};

// Funções para gerenciar filas
export const getQueueStats = async () => {
  const [documentStats, batchStats, aiStats] = await Promise.all([
    documentQueue.getJobCounts(),
    batchQueue.getJobCounts(),
    iaQueue.getJobCounts(),
  ]);
  
  return {
    document: documentStats,
    batch: batchStats,
    ai: aiStats,
  };
};

export const pauseQueue = async (queueName: 'document' | 'batch' | 'ai') => {
  const queue = getQueueByName(queueName);
  await queue.pause();
  logInfo('Queue paused', { queueName });
};

export const resumeQueue = async (queueName: 'document' | 'batch' | 'ai') => {
  const queue = getQueueByName(queueName);
  await queue.resume();
  logInfo('Queue resumed', { queueName });
};

export const cleanQueue = async (queueName: 'document' | 'batch' | 'ai', grace: number = 1000) => {
  const queue = getQueueByName(queueName);
  await queue.clean(grace, 'completed');
  await queue.clean(grace, 'failed');
  logInfo('Queue cleaned', { queueName, grace });
};

const getQueueByName = (name: 'document' | 'batch' | 'ai') => {
  switch (name) {
    case 'document':
      return documentQueue;
    case 'batch':
      return batchQueue;
    case 'ai':
      return iaQueue;
    default:
      throw new Error(`Unknown queue: ${name}`);
  }
};

// Funções para monitoramento
export const getJobProgress = async (jobId: string, queueName: 'document' | 'batch' | 'ai') => {
  const queue = getQueueByName(queueName);
  const job = await queue.getJob(jobId);
  
  if (!job) {
    return null;
  }
  
  return {
    id: job.id,
    status: await job.getState(),
    progress: job.progress(),
    data: job.data,
    result: job.returnvalue,
    failedReason: job.failedReason,
    attemptsMade: job.attemptsMade,
    timestamp: job.timestamp,
    processedOn: job.processedOn,
    finishedOn: job.finishedOn,
  };
};

export const retryJob = async (jobId: string, queueName: 'document' | 'batch' | 'ai') => {
  const queue = getQueueByName(queueName);
  const job = await queue.getJob(jobId);
  
  if (!job) {
    throw new Error('Job not found');
  }
  
  await job.retry();
  logInfo('Job retried', { jobId, queueName });
};

export const removeJob = async (jobId: string, queueName: 'document' | 'batch' | 'ai') => {
  const queue = getQueueByName(queueName);
  const job = await queue.getJob(jobId);
  
  if (!job) {
    throw new Error('Job not found');
  }
  
  await job.remove();
  logInfo('Job removed', { jobId, queueName });
};

// Função para limpar todas as filas
export const cleanupAllQueues = async () => {
  await Promise.all([
    documentQueue.clean(0, 'completed'),
    documentQueue.clean(0, 'failed'),
    batchQueue.clean(0, 'completed'),
    batchQueue.clean(0, 'failed'),
    iaQueue.clean(0, 'completed'),
    iaQueue.clean(0, 'failed'),
  ]);
  
  logInfo('All queues cleaned');
};

// Função para obter estatísticas detalhadas
export const getDetailedStats = async () => {
  const [documentJobs, batchJobs, aiJobs] = await Promise.all([
    documentQueue.getJobs(['active', 'waiting', 'completed', 'failed']),
    batchQueue.getJobs(['active', 'waiting', 'completed', 'failed']),
    iaQueue.getJobs(['active', 'waiting', 'completed', 'failed']),
  ]);
  
  return {
    document: {
      active: documentJobs.filter(job => job.processedOn).length,
      waiting: documentJobs.filter(job => !job.processedOn).length,
      completed: documentJobs.filter(job => job.finishedOn && !job.failedReason).length,
      failed: documentJobs.filter(job => job.failedReason).length,
    },
    batch: {
      active: batchJobs.filter(job => job.processedOn).length,
      waiting: batchJobs.filter(job => !job.processedOn).length,
      completed: batchJobs.filter(job => job.finishedOn && !job.failedReason).length,
      failed: batchJobs.filter(job => job.failedReason).length,
    },
    ai: {
      active: aiJobs.filter(job => job.processedOn).length,
      waiting: aiJobs.filter(job => !job.processedOn).length,
      completed: aiJobs.filter(job => job.finishedOn && !job.failedReason).length,
      failed: aiJobs.filter(job => job.failedReason).length,
    },
  };
};

// Função para adicionar tarefa à fila
export async function addIATask(data: any, opts?: JobsOptions) {
  await iaQueue.add('process', data, opts);
}

// Worker para processar as tarefas em background
export function startIAWorker(processFn: (data: any) => Promise<any>) {
  const worker = new Worker(
    'ia-processing',
    async job => {
      return await processFn(job.data);
    },
    { connection }
  );

  worker.on('failed', (job, err) => {
    // Log automático de falha, pode acionar reprocessamento
    console.error(`Job ${job.id} failed:`, err);
  });

  worker.on('completed', job => {
    // Log automático de sucesso
    console.log(`Job ${job.id} completed.`);
  });

  return worker;
}

export default {
  documentQueue,
  batchQueue,
  iaQueue,
  addDocumentJob,
  addBatchJob,
  addAIJob,
  getQueueStats,
  pauseQueue,
  resumeQueue,
  cleanQueue,
  getJobProgress,
  retryJob,
  removeJob,
  cleanupAllQueues,
  getDetailedStats,
  addIATask,
  startIAWorker,
}; 