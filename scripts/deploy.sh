#!/bin/bash
# üöÄ Script de Deploy para Produ√ß√£o - Sistema Tribut√°rio IA
# Data: 22/06/2025

echo "üöÄ Iniciando deploy do Sistema Tribut√°rio IA para Produ√ß√£o..."
echo "========================================================"

# Cores para output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para logging
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 1. Verificar Node.js
log_info "Verificando vers√£o do Node.js..."
NODE_VERSION=$(node --version)
log_info "Node.js version: $NODE_VERSION"

# 2. Instalar depend√™ncias
log_info "Instalando depend√™ncias..."
npm ci --only=production

# 3. Gerar Prisma Client
log_info "Gerando Prisma Client..."
npm run prisma:generate

# 4. Executar testes (cr√≠tico para produ√ß√£o)
log_info "Executando su√≠te completa de testes..."
npm run test:ci
if [ $? -ne 0 ]; then
    log_error "‚ùå Testes falharam! Deploy cancelado."
    exit 1
fi
log_info "‚úÖ Todos os 159 testes passaram!"

# 5. Lint e valida√ß√£o de c√≥digo
log_info "Executando lint..."
npm run lint
if [ $? -ne 0 ]; then
    log_error "‚ùå Problemas de lint encontrados! Deploy cancelado."
    exit 1
fi
log_info "‚úÖ C√≥digo aprovado no lint!"

# 6. Build para produ√ß√£o
log_info "Compilando TypeScript para produ√ß√£o..."
npm run build
if [ $? -ne 0 ]; then
    log_error "‚ùå Build falhou! Deploy cancelado."
    exit 1
fi
log_info "‚úÖ Build conclu√≠do com sucesso!"

# 7. Verificar arquivos de produ√ß√£o
log_info "Verificando arquivos compilados..."
if [ ! -f "dist/index.js" ]; then
    log_error "‚ùå Arquivo principal n√£o encontrado!"
    exit 1
fi
log_info "‚úÖ Arquivos de produ√ß√£o verificados!"

# 8. Configurar vari√°veis de ambiente
log_info "Configurando vari√°veis de ambiente para produ√ß√£o..."
if [ ! -f ".env.production" ]; then
    log_warn "‚ö†Ô∏è  Arquivo .env.production n√£o encontrado!"
    log_warn "   Usando .env padr√£o. Configure as vari√°veis de produ√ß√£o!"
fi

# 9. Executar migra√ß√µes do banco (se necess√°rio)
log_info "Verificando migra√ß√µes do banco..."
# npm run prisma:migrate:prod (descoment–µ quando configurar o banco)

# 10. Health check antes do deploy final
log_info "Realizando health check preliminar..."
node -e "console.log('‚úÖ Node.js funcionando corretamente')"

echo "========================================================"
log_info "üéâ Deploy preparado com sucesso!"
echo ""
log_info "üìã Pr√≥ximos passos para produ√ß√£o:"
echo "   1. Configure as vari√°veis de ambiente em .env.production"
echo "   2. Configure o banco PostgreSQL"
echo "   3. Configure o Redis"
echo "   4. Execute: npm run start:prod"
echo ""
log_info "üîç Para monitorar: curl http://localhost:3000/health"
echo "========================================================"
